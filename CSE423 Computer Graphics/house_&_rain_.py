# -*- coding: utf-8 -*-
"""House & Rain .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PV9P2Cya91Yr61CwpkInv50ddufEuWpt
"""

#Task1
import math
import random


from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

r, g, b = 0, 0, 0


Screen_width= 1000
Screen_height= 600
origin_x = Screen_width /2
origin_y = Screen_height /2
House_width=400
House_height=200


raindrop_count = random.randint(80, 100)
rain_speed = 8
rain_drops = [(random.randint(1, Screen_width - 1), random.randint(30, Screen_height), random.randint(20, 30)) for i in range(raindrop_count)]
wind = 0




def Draw():
    #Ground
    glBegin(GL_TRIANGLES)
    glColor3f(0.2, 0.4, 0.0)

    glVertex2f(0, 0)
    glVertex2f(0, Screen_height*0.4)
    glVertex2f(Screen_width, 0)

    glVertex2f(Screen_width, 0)
    glVertex2f(Screen_width, Screen_height*0.4)
    glVertex2f(0, Screen_height*0.4)
    glEnd()

    #House
    glBegin(GL_TRIANGLES)
    glColor3f(0.8, 0.4, 0.3)

    glVertex2f(origin_x - House_width / 2, origin_y + House_height / 2)
    glVertex2f(origin_x + House_width / 2, origin_y + House_height / 2)
    glVertex2f(origin_x + House_width / 2, origin_y - House_height / 2)

    glVertex2f(origin_x + House_width / 2, origin_y - House_height / 2)
    glVertex2f(origin_x - House_width / 2, origin_y + House_height / 2)
    glVertex2f(origin_x - House_width / 2, origin_y - House_height / 2)

    glEnd()

    #Roof
    glBegin(GL_TRIANGLES)
    glColor3f(0.8, 0.1, 0.1)

    glVertex2f(origin_x - House_width / 2 , origin_y + House_height / 2)
    glVertex2f(origin_x + House_width / 2 , origin_y + House_height / 2)
    glVertex2f(origin_x, origin_y + House_height / 2 + 120)
    glEnd()

    #Design(Door,windows)
    #Door
    glBegin(GL_TRIANGLES)
    glColor3f(0.35, 0.16, 0.14)
    glVertex2f(origin_x + 20, origin_y - House_height / 2)
    glVertex2f(origin_x - 20, origin_y)
    glVertex2f(origin_x - 20, origin_y - House_height / 2)

    glVertex2f(origin_x - 20, origin_y)
    glVertex2f(origin_x + 20, origin_y - House_height / 2)
    glVertex2f(origin_x + 20, origin_y)
    glEnd()

    #Windows
    glBegin(GL_TRIANGLES)
    glColor3f(0.53, 0.12, 0.47)

    #Left window
    glVertex2f(origin_x - 120, origin_y - 20)
    glVertex2f(origin_x - 120, origin_y + 20)
    glVertex2f(origin_x - 60, origin_y + 20)

    glVertex2f(origin_x - 60, origin_y + 20)
    glVertex2f(origin_x - 60, origin_y - 20)
    glVertex2f(origin_x - 120, origin_y - 20)

    glEnd()

    #Right window
    glBegin(GL_TRIANGLES)
    glColor3f(0.53, 0.12, 0.47)

    glVertex2f(origin_x + 60, origin_y - 20)
    glVertex2f(origin_x + 60, origin_y + 20)
    glVertex2f(origin_x + 120, origin_y + 20)

    glVertex2f(origin_x + 120, origin_y + 20)
    glVertex2f(origin_x + 120, origin_y - 20)
    glVertex2f(origin_x + 60, origin_y - 20)

    glEnd()



   # Raindrops
    global rain_drops, wind_offset
    glColor3f(0.4, 0.6, 1.0)  #Light Blue
    glBegin(GL_LINES)
    for i in rain_drops:
        x, y, length = i
        glVertex2f(x, y)
        glVertex2f(x + wind, y - length)
    glEnd()


def update_rain():
    for i in range(len(rain_drops)):
        x, y, length = rain_drops[i]
        y -= 1
        if y < 0 or x < 0 or x > Screen_width:
            x = random.randint(10, Screen_width - 10)
            y = random.randint(Screen_height, Screen_height + 100)
            length = random.randint(20, 50)
        rain_drops[i] = (x, y, length)
    glutPostRedisplay()



def iterate():
    glViewport(0, 0, Screen_width, Screen_height)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, Screen_width, 0.0, Screen_height, 0.0, 1.0)
    glMatrixMode (GL_MODELVIEW)
    glLoadIdentity()

def keyboard_listener(key, x, y):
    global r, g, b
    if key == b'd':  # Day Mode
        r, g, b = [min(c + 0.1, 1.0) for c in (r, g, b)]
        print("Day Mode")
    elif key == b'n':  # Night Mode
        r, g, b = [max(c - 0.1, 0.0) for c in (r, g, b)]
        print("Night Mode")
    glutPostRedisplay()

def special_keyboard_listener(key, x, y):
    global wind
    if key == GLUT_KEY_LEFT and wind > -20:
        wind -= 3
        print("Rain Left Shift")
    elif key == GLUT_KEY_RIGHT and wind < 20:
        wind += 3
        print("Rain Right Shift")
    glutPostRedisplay()

def showScreen():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    iterate()
    glColor3f(1.0, 7.0, 0.0) #konokichur color set (RGB)
    #call the draw methods here
    Draw()

    glutSwapBuffers()


def init():
    glClearColor(0, 0, 0, 1)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()



glutInit()
glutInitWindowSize(Screen_width, Screen_height)
glutInitWindowPosition(0, 0)
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)
glutCreateWindow(b"House in Rain")
init()
glutDisplayFunc(showScreen)
glutIdleFunc(update_rain)
glutSpecialFunc(special_keyboard_listener)
glutKeyboardFunc(keyboard_listener)
glutMainLoop()



#Task2

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

import random
import sys

window_width, window_height = 1000, 600
Radius = 20
Points_info = []
Speed = 0.001
Pause = False
Blink = False

def add_point(x, y):
    color = (random.random(), random.random(), random.random())
    direction = (random.choice([-1, 1]), random.choice([-1, 1]))
    Points_info.append([x, y, direction[0], direction[1], color, True])

def mouse_listener(key, state, x, y):
    global Blink
    if key == GLUT_RIGHT_BUTTON and state == GLUT_DOWN:
        gl_x = (x / window_width - 0.5) * 2
        gl_y = (0.5 - y / window_height) * 2
        add_point(gl_x, gl_y)
    elif key == GLUT_RIGHT_BUTTON and state == GLUT_DOWN:
        Blink = not Blink

def special_key_listener(key, x, y):
    global Speed
    if not Pause:
        if key == GLUT_KEY_UP:
            Speed *= 2
        elif key == GLUT_KEY_DOWN:
            Speed /= 2

def keyboard_listener2(key, x, y):
    global Pause
    if key == b' ':
        Pause = not Pause

def draw_points():
    glEnable(GL_POINT_SMOOTH)
    glPointSize(Radius)
    glBegin(GL_POINTS)
    for i in Points_info:
        if i[5]:
            glColor3f(*i[4])
            glVertex2f(i[0], i[1])
    glEnd()

def update_points():
    global pointSpeed
    if not Pause:
        for i in Points_info:
            i[0] += i[2] * Speed
            i[1] += i[3] * Speed
            if abs(i[0]) >= 1:
                i[2] *= -1
            if abs(i[1]) >= 1:
                i[3] *= -1
        if Blink:
            for i in Points_info:
                i[5] = not i[5]

def display():
    glClear(GL_COLOR_BUFFER_BIT)
    draw_points()
    glutSwapBuffers()
    update_points()
    glutPostRedisplay()

glutInit(sys.argv)
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA)
glutInitWindowSize(1000, 600)
glutCreateWindow(b"Amazing Box")
glClearColor(0.0, 0.0, 0.0, 0.0)
glutInitWindowPosition(0, 0)
glOrtho(-1, 1, -1, 1, -1, 1)
glutDisplayFunc(display)
glutMouseFunc(mouse_listener)
glutSpecialFunc(special_key_listener)
glutKeyboardFunc(keyboard_listener2)
glutMainLoop()