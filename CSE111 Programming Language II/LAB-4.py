# -*- coding: utf-8 -*-
"""CSE111-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17WrJEoXqQqQi5HzD9QzRkQdT72Ic37sT
"""

class GroceryDictionary:
  def __init__(self, cost_list, item_list):
    self.cost_list= cost_list
    self.item_list= item_list
    self.dict1= {}
  def printDictionary(self):
    for i in range(len(self.cost_list)):
      self.dict1[self.item_list[i]]=self.cost_list[i]
    print(self.dict1)
cost_list= [50, 23]
item_list= ["Apples", "Cherries"]
new_shopping_cart = GroceryDictionary(cost_list, item_list)
new_shopping_cart.printDictionary()
print("*********************")
cost_list2= [100, 230]
item_list2= ["Avocado", "Pineapple"]
new_shopping_cart2 = GroceryDictionary(cost_list2, item_list2)
new_shopping_cart2.printDictionary()
print("*********************")
print(new_shopping_cart.dict1)

#task 1
class  Customer:
  def __init__(self, name):
    self.name= name
  def greet(self, name = None):
    if name == None:
      print("Hello!")
    else:
      print(f"Hello {name}!")
  def purchase(self, *args):
    print(f"{self.name}, you purchased {len(args)} item(s): ")
    for i in args:
      print(i)
#Driver Code
customer_1 = Customer("Sam")
customer_1.greet()
customer_1.purchase("chips", "chocolate", "orange juice")
print("-----------------------------")
customer_2 = Customer("David")
customer_2.greet("David")
customer_2.purchase("orange juice")

#task 2
class Panda:
  def __init__(self, name, gender, age):
    self.name= name
    self.gender= gender
    self.age= age
  def sleep(self, hour = None):
    if hour == None:
      return f"{self.name}'s duration is unknown thus should have only bamboo leaves"
    elif 3<=hour<=5:
      return f"{self.name} sleeps {hour} hours daily and should have Mixed Veggies"
    elif 6<=hour<=8:
      return f"{self.name} sleeps {hour} hours daily and should have Eggplant & Tofu"
    elif 9<=hour<=11:
      return f"{self.name} sleeps {hour} hours daily and should have Broccoli Chicken"
panda1 = Panda("Kunfu", "Male", 5)
panda2 = Panda("Pan Pan", "Female",3)
panda3 = Panda("Ming Ming", "Female",8)

print("{} is a {} Panda Bear who is {} years old".format(panda1.name,panda1.gender,panda1.age))
print("{} is a {} Panda Bear who is {} years old".format(panda2.name,panda2.gender,panda2.age))
print("{} is a {} Panda Bear who is {} years old".format(panda3.name,panda3.gender,panda3.age))
print("===========================")
print(panda2.sleep(10))
print(panda1.sleep(4))
print(panda3.sleep())

#task 3
class Cat:
  def __init__ (self, colour= "White", position= "sitting"):
    self.colour= colour
    self.position= position
  def printCat(self):
    print(f"{self.colour} cat is {self.position}")
  def changeColor(self, newcol):
    self.colour= newcol
c1 = Cat()
c2 = Cat("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()

#task 4
class Student:
  def __init__(self, name= "default student"):
    self.name= name
  def quizcalc(self, *args):
    self.avg= (sum(args))/3
  def printdetail(self):
    print(f"Hello {self.name} \nYour average quiz score is {self.avg}")
s1 = Student()
s1.quizcalc(10)
print('--------------------------------')
s1.printdetail()
s2 = Student('Harry')
s2.quizcalc(10,8)
print('--------------------------------')
s2.printdetail()
s3 = Student('Hermione')
s3.quizcalc(10,9,10)
print('--------------------------------')
s3.printdetail()

#task 5
class Student:
  def __init__(self, name, ID, dept= "CSE"):
    self.name= name
    self.ID= ID
    self.dept= dept
  def dailyEffort(self, hour):
    self.hour= hour
    if hour <= 2:
      self.suggestion= "Suggestion: Should give more effort!"
    elif hour <= 4:
      self.suggestion= "Suggestion: Keep up the good work!"
    else:
      self.suggestion= "Suggestion: Excellent! Now motivate others"
  def printDetails(self):
    print(f"Name: {self.name} \nID: {self.ID} \nDepartment: {self.dept} \nDaily Effort: {self.hour} hour(s) \n{self.suggestion}")
harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

#task 6
class Patient:
  def __init__(self, name, age):
    self.name= name
    self.age= age
  def add_Symptom(self, *args):
    symp= ""
    for i in list(args):
      symp+= f"{i}, "
    self.symp=symp
  def printPatientDetail(self):
    print(f"Name: {self.name} \nAge: {self.age} \nSymptoms: {self.symp[:-2]}")
p1 = Patient("Thomas", 23)
p1.add_Symptom("Headache")
p2 = Patient("Carol", 20)
p2.add_Symptom("Vomiting", "Coughing")
p3 = Patient("Mike", 25)
p3.add_Symptom("Fever", "Headache", "Coughing")
print("=========================")
p1.printPatientDetail()
print("=========================")
p2.printPatientDetail()
print("=========================")
p3.printPatientDetail()

#task 7
class Match:
  def __init__(self, name):
    print("5..4..3..2..1.. Play !!!")
    self.t1= name.split("-")[0]
    self.t2= name.split("-")[1]
    self.run= 0
    self.wicket= 0
    self.over= 0
  def add_run(self, p):
    self.run += p
  def add_wicket(self, q):
    self.wicket += q
  def add_over(self, r):
    if self.over + r <5:
      self.over += r
    else:
      print(f"Warning! Cannot add {r} over/s (5 over match)")
  def print_scoreboard(self):
    return f"Batting Team: {self.t1} \nBowling Team: {self.t2} \nTotal Runs: {self.run} Wickets: {self.wicket} Overs: {self.over}"
match1 = Match("Rangpur Riders-Cumilla Victorians")
print("=========================")
match1.add_run(4)
match1.add_run(6)
match1.add_over(1)
print(match1.print_scoreboard())
print("=========================")
match1.add_over(5)
print("=========================")
match1.add_wicket(1)
print(match1.print_scoreboard())

#task 8
class ParcelKoro:
  def __init__(self, name= "No name set", weight= 0, fee= 0):
    self.name= name
    self.product_weight= weight
    self.fee= fee
  def calculateFee(self, location = False):
    if self.product_weight > 0:
      if not location:
        self.fee = (self.product_weight * 20) + 50
      else:
        self.fee = (self.product_weight * 20) + 100
  def printDetails(self):
    print(f"Customer Name: {self.name} \nProduct weight: {self.product_weight} \nTotal fee: {self.fee}")
print("**********************")
p1 = ParcelKoro()
p1.calculateFee()
p1.printDetails()
print("**********************")
p2 = ParcelKoro('Bob The Builder')
p2.calculateFee()
p2.printDetails()
print("----------------------------")
p2.product_weight = 15
p2.calculateFee()
p2.printDetails()
print("**********************")
p3 = ParcelKoro('Dora The Explorer', 10)
p3.calculateFee('Dhanmondi')
p3.printDetails()

#Task 9
class Batsman:
  def __init__(self, *data):
    if type(data[0]) == str:
      self.name = data[0]
      self.runs = data[1]
      self.balls = data[2]
    else:
      self.name = "New Batsman"
      self.runs = data[0]
      self.balls = data[1]
  def printCareerStatistics(self):
    print(f"Name: {self.name} \nRuns Scored: {self.runs} , Balls Faced: {self.balls}")
  def setName(self, name):
    self.name = name
  def battingStrikeRate(self):
    return (self.runs/self.balls)*100
b1 = Batsman(6101, 7380)
b1.printCareerStatistics()
print("============================")
b2 = Batsman("Liton Das", 678, 773)
b2.printCareerStatistics()
print("----------------------------")
print(b2.battingStrikeRate())
print("============================")
b1.setName("Shakib Al Hasan")
b1.printCareerStatistics()
print("----------------------------")
print(b1.battingStrikeRate())

#Task 10
class EPL_Team:
  def __init__(self, name, slogan= "No Slogan"):
    self.name= name
    self.slogan= slogan
    self.title= 0
  def showClubInfo(self):
    return f"Name: {self.name} \nSlogan: {self.slogan} \nTotal No. of title: {self.title}"
  def increaseTitle(self):
    self.title+=1
  def changeSong(self, song):
    self.slogan= song
manu = EPL_Team('Manchester United', 'Glory Glory Man United')
chelsea = EPL_Team('Chelsea')
print('===================')
print(manu.showClubInfo())
print('##################')
manu.increaseTitle()
print(manu.showClubInfo())
print('===================')
print(chelsea.showClubInfo())
chelsea.changeSong('Keep the blue flag flying high')
print(chelsea.showClubInfo())

#task 11
class Author:
  def __init__(self, name="Default", *args):
    self.books= []
    self.name=name
    if len(args)>=0:
      self.books+= list(args)
  def addBooks(self, *books):
    self.books+= list(books)
  def changeName(self, name1):
    self.name= name1
  def printDetails(self):
    print(f"Author Name:  {self.name} \n--------\nList of Books:")
    for i in self.books:
      print(i)
auth1 = Author('Humayun Ahmed')
auth1.addBooks('Deyal', 'Megher Opor Bari')
auth1.printDetails()
print("===================")
auth2 = Author()
print(auth2.name)
auth2.changeName('Mario Puzo')
auth2.addBooks('The Godfather', 'Omerta', 'The Sicilian')
print("===================")
auth2.printDetails()
print("===================")
auth3 = Author('Paolo Coelho', 'The Alchemist', 'The Fifth Mountain')
auth3.printDetails()

#task 12 Siam
class TaxiLagbe:
  def __init__(self, code, area):
    self.code = code
    self.area = area
    self.pass1_dict = {}
    self.pass1_arr = ""
  def addPassenger(self, *pass1):
    for i in pass1:
      if len(self.pass1_dict) == 4:
        print("Taxi Full! No more passengers can be added.")
        return
      self.pass1_arr += f"{i.split('_')[0]}, "
      print(f"Dear {i.split('_')[0]}! Welcome to TaxiLagbe.")
      self.pass1_dict[i.split('_')[0]] = int(i.split('_')[1])
  def printDetails(self):
    print(f"Trip info for Taxi number: {self.code}\nThis taxi can cover only {self.area} area.")
    print(f"Total passengers: {len(self.pass1_dict)}")
    print(f"Passengers lists:\n{self.pass1_arr[:-2]}")
    print(f"Total collected fare: {sum(self.pass1_dict.values())}")
taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200')
taxi1.addPassenger('Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115')
taxi2.addPassenger('Parker_215')
print('-------------------------------')
taxi2.printDetails()

#task 13
class Account:
  def __init__(self, name= "Default account", balance= 0.0):
    self.name= name
    self.balance= balance
  def details(self):
    return f"{self.name} \n{self.balance}"
  def withdraw(self, amount):
    self.amount= amount
    if (self.balance-self.amount)<3071:
     print("Sorry, Withdraw unsuccessful! The account balance after deducting withdraw amount is equal to or less than minimum.")
    else:
      print(f"Withdraw successful! New balance is: {(self.balance-self.amount)}")
a1 = Account()
print(a1.details())
print("------------------------")
a1.name = "Oliver"
a1.balance = 10000.0
print(a1.details())
print("------------------------")
a2 = Account("Liam")
print(a2.details())
print("------------------------")
a3 = Account("Noah",400)
print(a3.details())
print("------------------------")
a1.withdraw(6930)
print("------------------------")
a2.withdraw(600)
print("------------------------")
a1.withdraw(6929)

#Task 14
class StudentDatabase:
  def __init__(self, name, ID):
    self.name = name
    self.ID = ID
    self.grades = {}
  def calculateGPA(self, courses, semester):
    self.courses = []
    self.gpa = 0
    for i in courses:
      self.courses += [i.split(": ")[0]]
      self.gpa += float(i.split(": ")[1])
    self.gpa /= len(self.courses)
    self.grades[semester] = {tuple(self.courses): round(self.gpa, 2)}
  def printDetails(self):
    print(f"Name: {self.name}\nID: {self.ID}")
    for i in self.grades:
      print(f"Courses taken in {i}:")
      for j in self.grades[i]:
        for k in j:
          print(k)
        print(f"GPA: {round(self.grades[i][j], 2)}")
s1 = StudentDatabase('Pietro', '10101222')
s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 'Summer2020')
s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')
print(f'Grades for {s1.name}\n{s1.grades}')
print('------------------------------------------------------')
s1.printDetails()
s2 = StudentDatabase('Wanda', '10103332')
s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 'Summer2022')
print('------------------------------------------------------')
print(f'Grades for {s2.name}\n{s2.grades}')
print('------------------------------------------------------')
s2.printDetails()

class FinalT6A:
    def __init__(self, x, p):
        self.temp, self.sum, self.y = 4, 0, 1
        self.temp += 1
        self.y = self.temp - p
        self.sum = self.temp + x
        print(x, self.y, self.sum)
    def methodA(self):
        x = 0
        y = 0
        y = y + self.y
        x = self.y + 2 + self.temp
        self.sum = x + y + self.methodB(self.temp, y)
        print(x, y, self.sum)
    def methodB(self, temp, n):
        x = 0
        temp += 1
        self.y = self.y + temp
        x = x + 3 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)
        return self.sum

q1 = FinalT6A(2,1)
q1.methodA()
q1.methodA()

class Quiz3A:
    def __init__(self, k = None):
        self.temp, self.sum, self.y = 4, 0, 0
        if k != None:
            self.temp += 1
            self.temp = self.temp
            self.sum = self.temp + k
            self.y = self.sum - 1
        else:
            self.y = self.temp - 1
            self.sum = self.temp + 1
            self.temp += 2
    def methodB(self, m, n):
        x = 0
        self.temp += 1
        self.y = self.y + m + (self.temp)
        x = x + 2 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)
        return self.sum

a1 = Quiz3A()
a1.methodB(1,2)
a2 = Quiz3A(3)
a2.methodB(2,4)
a1.methodB(2,1)
a2.methodB(1,3)

class Test5:
  def __init__(self):
      self.sum = 0
      self.y = 0
  def methodA(self):
      x=y=k=0
      msg = [5]
      while (k < 2):
          y += msg[0]
          x = y + self.methodB(msg, k)
          self.sum = x + y + msg[0]
          print(x ," " , y, " " , self.sum)
          k+=1
  def methodB(self, mg2, mg1):
        x = 0
        self.y += mg2[0]
        x = x + 3 + mg1
        self.sum += x + self.y
        mg2[0] = self.y + mg1
        mg1 += x + 2
        print(x , " " ,self.y, " " , self.sum)
        return mg1

t1 = Test5()
t1.methodA()
t1.methodA()

class Test4:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x, y = 0, 0
        msg = [0]
        msg[0] = 5
        y = y + self.methodB(msg[0])
        x = y + self.methodB(msg, msg[0])
        self.sum = x + y + msg[0]
        print(x, y, self.sum)
    def methodB(self, *args):
        if len(args) == 1:
            mg1 = args[0]
            x, y = 0, 0
            y = y + mg1
            x = x + 33 + mg1
            self.sum = self.sum + x + y
            self.y = mg1 + x + 2
            print(x, y, self.sum)
            return y
        else:
            mg2, mg1 = args
            x = 0
            self.y = self.y + mg2[0]
            x = x + 33 + mg1
            self.sum = self.sum + x + self.y
            mg2[0] = self.y + mg1
            mg1 = mg1 + x + 2
            print(x, self.y, self.sum)
            return self.sum

t3 = Test4()
t3.methodA()
t3.methodA()
t3.methodA()
t3.methodA()

class msgClass:
    def __init__(self):
        self.content = 0
class Q5:
    def __init__(self):
        self.sum = 1
        self.x = 2
        self.y = 3
    def methodA(self):
        x, y = 1, 1
        msg = []
        myMsg = msgClass()
        myMsg.content = self.x
        msg.append(myMsg)
        msg[0].content = self.y + myMsg.content
        self.y = self.y + self.methodB(msg[0])
        y = self.methodB(msg[0]) + self.y
        x = y + self.methodB(msg[0], msg)
        self.sum = x + y + msg[0].content
        print(x," ", y," ", self.sum)
    def methodB(self, mg1, mg2 = None):
      if mg2 == None:
          x, y = 5, 6
          y = self.sum + mg1.content
          self.y = y + mg1.content
          x = self.x + 7 +mg1.content
          self.sum = self.sum + x + y
          self.x = mg1.content + x +8
          print(x, " ", y," ", self.sum)
          return y
      else:
          x = 1
          self.y += mg2[0].content
          mg2[0].content = self.y + mg1.content
          x = x + 4 + mg1.content
          self.sum += x + self.y
          mg1.content = self.sum - mg2[0].content
          print(self.x, " ",self.y," ", self.sum)
          return self.sum

q = Q5()
q.methodA()

class Spotify:
  def __init__(self, genre, *songs):
    self.genre= genre
    song= ""
    for i in list(songs):
      song+= f"{i}, "
    self.song= song

  def show_playlist(self):
    return f"Genre: {self.genre} \nSong list: {self.song[:-2]}"
rock= Spotify("Heavy Metal", "This Fire Burns", "Here I Am")
print(rock.show_playlist())

class MidB:
 def __init__(self):
  self.x = 3
  self.y = 0
  self.sum = 5
 def methodA(self, x):

  self.y = self.sum + self.x + x
  self.sum = x + self.y
  d = MidB()
  d.sum = self.sum + self.methodB(d)
  print(self.x, self.y, self.sum)
 def methodB(self, t, z=0):
  y = 3
  t.x = self.x + self.sum
  self.sum = t.x + t.y + y
  print(t.x, t.y, t.sum)
  if z == 0:
    return t.sum
b= MidB()
b.methodA(6)
b.methodB(b, 99)

class MidB:
 def __init__(self):
  self.x = 4
  self.y = 1
  self.sum = 3
 def methodA(self, x):

  self.y = self.sum + self.x + x
  self.sum = x + self.y
  d = MidB()
  d.sum = self.sum + self.methodB(d)
  print(self.x, self.y, self.sum)
 def methodB(self, t, z=0):
  y = 3
  t.x = self.x + self.sum
  self.sum = t.x + t.y + y
  print(t.x, t.y, t.sum)
  if z == 0:
    return t.sum
b= MidB()
b.methodA(4)
b.methodB(b, 99)

class Exam:
  def __init__(self, type1, qno, perqm):
    self.type1= type1
    self.qno=qno
    self.perqm=perqm
  def detail(self):
    return f"Exam type: {self.type1} \nNumber of questions: {self.qno} \nMarks per questions: {self.perqm} \nTotal Marks: {self.qno*self.perqm}"
e1 = Exam('Midterm', 2, 10)
print(e1.detail())
print("===========================")
e2 = Exam('Final', 3, 10)
print(e2.detail())

class MidA:
 def __init__(self):
  self.x = 3
  self.y = 7
  self.sum = 0
 def methodA(self, x):
  self.y = x + self.sum + self.x
  self.sum = x + self.y
  z = MidA()
  z.sum = self.sum + self.y
  self.methodB(z)
  print(self.x, self.y, self.sum)
 def methodB(self, a):
  y = 3
  a.x = self.x + self.sum;
  self.sum = a.x + a.y + y
  print(a.x, a.y, a.sum)
a = MidA()
a.methodA(5)