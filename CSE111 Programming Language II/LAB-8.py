# -*- coding: utf-8 -*-
"""CSE111-8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OMwLzhOjg7wqmjmhs5q2-tlI6KOIzT5K
"""

#task 1
class RealNumber:
  def __init__(self, r=0):
    self.__realValue = r
  def getRealValue(self):
    return self.__realValue
  def setRealValue(self, r):
    self.__realValue = r
  def __str__(self):
    return 'RealPart: '+str(self.getRealValue())


class ComplexNumber(RealNumber):
  def __init__(self, r = 1.0, i=1.0):
    super().__init__(float(r))
    self.__imgval = float(i)
  def getImgVal(self):
    return self.__imgval
  def setImgVal(self, i):
    self.__imgval= float(i)
  def __str__(self):
    return f"{super().__str__()} \nImaginary Part: {self.__imgval}"


cn1 = ComplexNumber()
print(cn1)
print('---------')
cn2 = ComplexNumber(5,7)
print(cn2)

#task 2 [UNGRADED]
class RealNumber:
  def __init__(self, number=0):
    self.number = number
  def __add__(self, anotherRealNumber):
    return self.number + anotherRealNumber.number
  def __sub__(self, anotherRealNumber):
    return self.number - anotherRealNumber.number
  def __str__(self):
    return str(self.number)


class ComplexNumber(RealNumber):
  def __init__(self, x, y):
    if type(x) == int:
      super().__init__(x)
    else:
      super().__init__(x.number)
    self.img = y
  def __add__(self, cmplx):
    real = self.number + cmplx.number
    img = self.img + cmplx.img
    return ComplexNumber(real, img)
  def __sub__(self, cmplx):
    real = self.number - cmplx.number
    img = self.img - cmplx.img
    return ComplexNumber(real, img)
  def __str__(self):
    out= f"{self.number}"
    if self.img>0:
      out+= f" + {self.img}i"
    else:
      out+= f" - {str(self.img)[1:]}i"
    return out


r1 = RealNumber(3)
r2 = RealNumber(5)
print(r1+r2)
cn1 = ComplexNumber(2, 1)
print(cn1)
cn2 = ComplexNumber(r1, 5)
print(cn2)
cn3 = cn1 + cn2    # cn3= cn1.__add__(cn2)
print(cn3)
cn4 = cn1 - cn2
print(cn4)

#task 3
class Account:
  def __init__(self, balance):
    self._balance = balance

  def getBalance(self):
    return self._balance


class CheckingAccount(Account):
  numberOfAccount = 0

  def __init__(self, balance=0.0):
    super().__init__(balance)
    CheckingAccount.numberOfAccount += 1

  def __str__(self):
    return f'Checking Account Balance: {self.getBalance()}'


print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)
print(CheckingAccount())
print(CheckingAccount(100.00))
print(CheckingAccount(200.00))
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)

#task 4
class Fruit:
    def __init__(self, formalin=False, name=''):
        self.__formalin = formalin
        self.name = name

    def getName(self):
        return self.name

    def hasFormalin(self):
        return self.__formalin

class Mango(Fruit):
    def __init__(self, formalin=True):
        super().__init__(formalin, "Mango")
    def __str__(self):
        if self.hasFormalin():
            return f"{super().getName()}s are bad for you"
        else:
            return f"{super().getName()}s are good for you"

class Jackfruit(Fruit):
    def __init__(self, formalin=False):
        super().__init__(formalin, "Jackfruit")
    def __str__(self):
        if self.hasFormalin():
            return f"{super().getName()}s are bad for you"
        else:
            return f"{super().getName()}s are good for you"

class testFruit:
    def test(self, f):
        print('----Printing Detail----')
        if f.hasFormalin():
            print('Do not eat the',f.getName()+'.')
            print(f)
        else:
            print('Eat the',f.getName()+'.')
            print(f)

m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#task 5
class Exam:
  def __init__(self,marks):
    self.marks = marks
    self.time = 60

  def examSyllabus(self):
    return "Maths , English"
  def examParts(self):
    return "Part 1 - Maths\nPart 2 - English\n"


class ScienceExam(Exam):
  def __init__(self, marks, time, *subs):
    super().__init__(marks)
    self.time= time
    self.subs= subs

  def examSyllabus(self):
    out= f"{super().examSyllabus()}"
    for i in self.subs:
      out+= f" , {i}"
    return out

  def examParts(self):
    out= f"{super().examParts()}"
    for i in self.subs:
      out += f"Part {3+ self.subs.index(i)} - {i}\n"
    return out

  def __str__(self):
    return f"Marks: {self.marks} Time: {self.time} minutes Number of Parts: {2+ len(self.subs)}"


engineering = ScienceExam(100,90,"Physics","HigherMaths")
print(engineering)
print('----------------------------------')
print(engineering.examSyllabus())
print(engineering.examParts())
print('==================================')
architecture = ScienceExam(100,120,"Physics","HigherMaths","Drawing")
print(architecture)
print('----------------------------------')
print(architecture.examSyllabus())
print(architecture.examParts())

#task 6
class Shape3D:

  pi = 3.14159
  def __init__(self, name = 'Default', radius = 0):
    self._area = 0
    self._name = name
    self._height = 'No need'
    self._radius = radius

  def calc_surface_area(self):
    return 2 * Shape3D.pi * self._radius

  def __str__(self):
      return "Radius: "+str(self._radius)


class Sphere(Shape3D):
  def __init__(self, name, radius):
    super().__init__(name, radius)
    print(f"Shape name: Sphere, Area Formula: 4 * pi * r * r")
  def calc_surface_area(self):
    return 4*Shape3D.pi*self._radius**2
  def __str__(self):
    return f"Radius: {self._radius} Height: {self._height}\nArea: {self.calc_surface_area()}"

class Cylinder(Shape3D):
  def __init__(self, name, radius, height):
    super().__init__(name, radius)
    self._height= height
    print(f"Shape name: Cylinder, Area Formula: 2 * pi * r * (r + h)")
  def calc_surface_area(self):
    return 2*Shape3D.pi*self._radius*(self._radius+self._height)
  def __str__(self):
    return f"Radius: {self._radius} Height: {self._height}\nArea: {self.calc_surface_area()}"


sph = Sphere('Sphere', 5)
print('----------------------------------')
sph.calc_surface_area()
print(sph)
print('==================================')
cyl = Cylinder('Cylinder', 5, 10)
print('----------------------------------')
cyl.calc_surface_area()
print(cyl)

#task 7
class PokemonBasic:

  def __init__(self, name = 'Default', hp = 0, weakness = 'None', type = 'Unknown'):
    self.name = name
    self.hit_point = hp
    self.weakness = weakness
    self.type = type

  def get_type(self):
    return 'Main type: ' + self.type

  def get_move(self):
    return 'Basic move: ' + 'Quick Attack'

  def __str__(self):
    return "Name: " + self.name + ", HP: " + str(self.hit_point) + ", Weakness: " + self.weakness

class PokemonExtra(PokemonBasic):
  def __init__(self, name, HP, weakness, *details):
    super().__init__(name, HP, weakness, details[0])
    if len(details) > 1:
      self.secondary = details[1]
    else:
      self.secondary = []
    if len(details) > 2:
      self.moves = details[2]
    else:
      self.moves = []
  def get_type(self):
    if self.secondary:
      return f"{super().get_type()}, Secondary type: {self.secondary}"
    return super().get_type()
  def get_move(self):
    if self.moves:
      return f"{super().get_move()}\nOther move: {', ' .join(self.moves)}"
    return super().get_move()

print('\n------------Basic Info:--------------')
pk = PokemonBasic()
print(pk)
print(pk.get_type())
print(pk.get_move())

print('\n------------Pokemon 1 Info:-------------')
charmander = PokemonExtra('Charmander', 39, 'Water', 'Fire')
print(charmander)
print(charmander.get_type())
print(charmander.get_move())

print('\n------------Pokemon 2 Info:-------------')
charizard = PokemonExtra('Charizard', 78, 'Water', 'Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))
print(charizard)
print(charizard.get_type())
print(charizard.get_move())

#task 8
class Team:

  def __init__(self, name):
    self.name = "default"
    self.total_player = 5
  def info(self):
    print("We love sports")


class FootBallTeam(Team):
  def __init__(self, name):
    self.name= name
    self.total_player= 11
  def info(self):
    print(f"Our name is {self.name} \nWe play Football")
    print("We love sports")
class CricketTeam(Team):
  def __init__(self, name):
    self.name= name
    self.total_player= 11
  def info(self):
    print(f"Our name is {self.name} \nWe play Cricket")
    print("We love sports")


class Team_test:
  def check(self, tm):
    print("=========================")
    print("Total Player: ", tm.total_player)
    tm.info()

f = FootBallTeam("Brazil")
c = CricketTeam("Bangladesh")
test = Team_test()
test.check(f)
test.check(c)

#task 9
class Pokemon:

  def __init__(self, p):
    self.pokemon = p
    self.pokemon_type = "Needs to be set"
    self.pokemon_weakness = "Needs to be set"
  def kind(self):
    return self.pokemon_type
  def weakness(self):
    return self.pokemon_weakness
  def what_am_i(self):
    print("I am a Pokemon.")


class Pikachu(Pokemon):
  def __init__(self):
    super().__init__("Pikachu")
    self.pokemon_type = "Electric"
    self.pokemon_weakness = "Ground"
  def what_am_i(self):
    print("I am a Pokemon.")
    print("I am Pikachu.")
class Charmander(Pokemon):
  def __init__(self):
    super().__init__("Charmander")
    self.pokemon_type = "Fire"
    self.pokemon_weakness = "Water, Ground and Rock"
  def what_am_i(self):
    print("I am a Pokemon.")
    print("I am Charmander.")

pk1 = Pikachu()
print("Pokemon:", pk1.pokemon)
print("Type:", pk1.kind())
print("Weakness:", pk1.weakness())
pk1.what_am_i()
print("========================")
c1 = Charmander()
print("Pokemon:", c1.pokemon)
print("Type:", c1.kind())
print("Weakness:", c1.weakness())
c1.what_am_i()

#task 10
class Department:
    def __init__(self, s):
        self.semester = s
        self.name = "Default"
        self.id = -1

    def student_info(self):
        print("Name:", self.name)
        print("ID:", self.id)

    def courses(self, c1, c2, c3):
        print("No courses Approved yet!")


class CSE(Department):
  def __init__(self, name, id, s):
    super().__init__(s)
    self.name= name
    self.id= id
  def courses(self, c1, c2, c3):
    print(f"Courses Approved to this CSE student in {self.semester} semester: \n{c1} \n{c2} \n{c3}")

class EEE(Department):
  def __init__(self, name, id, s):
    super().__init__(s)
    self.name= name
    self.id= id
  def courses(self, c1, c2, c3):
    print(f"Courses Approved to this EEE student in {self.semester} semester: \n{c1} \n{c2} \n{c3}")


s1 = CSE("Rahim", 16101328,"Spring2016")
s1.student_info()
s1.courses("CSE110", "MAT110", "ENG101")
print("==================")
s2 = EEE("Tanzim", 18101326, "Spring2018")
s2.student_info()
s2.courses("Mat110", "PHY111", "ENG101")
print("==================")
s3 = CSE("Rudana", 18101326, "Fall2017")
s3.student_info()
s3.courses("CSE111", "PHY101", "MAT120")
print("==================")
s4 = EEE("Zainab", 19201623, "Summer2019")
s4.student_info()
s4.courses("EEE201", "PHY112", "MAT120")

class A:
    def __init__(self):
        self.temp = 4
        self.sum = 1
        self.y = 2
        self.y = self.temp - 2
        self.sum = self.temp + 3
        self.temp -= 2
    def methodA(self, m,  n):
        x = 0
        self.y = self.y + m + self.temp
        self.temp += 1
        x = x + 2 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)

class B(A):
    def __init__(self, b=None):
        super().__init__()
        self.x = 1
        self.sum = 2
        if b == None:
            self.y = self.temp + 3
            self.sum = 3 + self.temp + 2
            self.temp -= 1
        else:
            self.sum = b.sum
            self.x = b.x
    def methodB(self, m,  n):
        y = 0
        y = y + self.y
        self.x = y + 2 + self.temp
        self.methodA(self.x, y)
        self.sum = self.x + y + self.sum
        print(self.x, y, self.sum)

a1 = A()
b1 = B()
b2 = B(b1)
a1.methodA(1, 1)
b1.methodA(1, 2)
b2.methodB(3, 2)