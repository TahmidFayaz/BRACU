# -*- coding: utf-8 -*-
"""CSE111-5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K5Tr5p-9fw8jiDn-k6yyOrtbKOF0kP3P
"""

#task 1
import math
class Circle:
  def __init__(self, radius):
    self.__radius= radius
  def getRadius(self):
    return self.__radius
  def setRadius(self, radius):
    self.__radius= radius
  def area(self):
    self.__area= math.pi*(self.__radius**2)
    return self.__area

c1 = Circle(4)
print("First circle radius:" , c1.getRadius())
print("First circle area:" , c1.area())
c2 = Circle(5)
print("Second circle radius:" , c2.getRadius())
print("Second circle area:" , c2.area())

#Lab diff task 1
import math
class Circle:
  def __init__(self, radius):
    self.__radius= radius
  def getRadius(self):
    return self.__radius
  def setRadius(self, radius):
    self.__radius= radius
  def __area(self):
    self.__area= math.pi*(self.__radius**2)
    return self.__area
  def showArea(self):
    return self.__area()
c1 = Circle(4)
c1.setRadius(5)
print("First circle radius:" , c1.getRadius())
print("First circle area:" , c1.showArea())

#task 2
class Triangle:
  def __init__(self, base, height):
    self.__base= base
    self.__height=height
  def setHeight(self, height):
    self.__height= height
  def getHeight(self):
    return self.__height
  def setBase(self, base):
    self.__base= base
  def getBase(self):
    return self.__base
  def area(self):
    self.__area= 1/2*(self.__base*self.__height)
    return self.__area

t1 = Triangle(10, 5)
print("First Triangle Base:" , t1.getBase())
print("First Triangle Height:" , t1.getHeight())
print("First Triangle area:" ,t1.area())


t2 = Triangle(5, 3)
print("Second Triangle Base:" , t2.getBase())
print("Second Triangle Height:" , t2.getHeight())
print("Second Triangle area:" ,t2.area())

#task 3
class Teacher:
  def __init__(self, name, dept):
     self.__name= name
     self.__dept= dept
     self.__course= []
  def addCourse(self, sub):
    self.__course += [sub.name]
  def printDetail(self):
    print("====================================")
    print(f"Name: {self.__name}")
    print(f"Department: {self.__dept}")
    print("List of courses \n====================================")
    for i in self.__course:
      print(i)
    print("====================================")

class Course:
  def __init__(self, name):
    self.name= name

t1 = Teacher("Saad Abdullah", "CSE")
t2 = Teacher("Mumit Khan", "CSE")
t3 = Teacher("Sadia Kazi", "CSE")
c1 = Course("CSE 110 Programming Language I")
c2 = Course("CSE 111 Programming Language-II")
c3 = Course("CSE 220 Data Structures")
c4 = Course("CSE 221 Algorithms")
c5 = Course("CCSE 230 Discrete Mathematics")
c6 = Course("CSE 310 Object Oriented Programming")
c7 = Course("CSE 320 Data Communications")
c8 = Course("CSE 340 Computer Architecture")
t1.addCourse(c1)
t1.addCourse(c2)
t2.addCourse(c3)
t2.addCourse(c4)
t2.addCourse(c5)
t3.addCourse(c6)
t3.addCourse(c7)
t3.addCourse(c8)
t1.printDetail()
t2.printDetail()
t3.printDetail()

#task 4
class Team:
  def __init__(self, name= False):
    if name:
      self.__name= name
    self.__playerlist= []
  def setName(self, name):
    self.__name= name
  def addPlayer(self, player):
    self.__playerlist += [player.name]
  def printDetail(self):
    print("=====================")
    print(f"Team: {self.__name}")
    print(f"List of Players: \n{self.__playerlist} \n=====================")

class Player:
  def __init__(self, name):
    self.name= name

b = Team()
b.setName('Bangladesh')
mashrafi = Player("Mashrafi")
b.addPlayer(mashrafi)
tamim = Player("Tamim")
b.addPlayer(tamim)
b.printDetail()
a = Team("Australia")
ponting = Player("Ponting")
a.addPlayer(ponting)
lee = Player("Lee")
a.addPlayer(lee)
a.printDetail()

#task 5
class Student:
  def __init__(self, name, ID, dept):
    self.name= name
    self.ID= ID
    self.dept= dept
    self.courses = []
    self.email= None
    self.password= None
    self.login= False
    print("Student object is created!")
class Usis:
  def __init__(self):
    print("USIS is ready to use!")
  def login(self, user):
    if  (user.email or user.password):
      print("Login successful!")
      user.login= True
    else:
      print("Email and password need to be set.")
  def advising(self, user, *courses):
    if user.login:
      if len(courses) == 0:
        print("You haven't selected any courses.")
      elif len(user.courses+list(courses)) >3:
        print("You need special approval to take more than 3 courses.")
      else:
        user.courses += list(courses)
        print("Advising successful!")
    else:
      print("Please login to advise courses!")
  def individualDetails(self, user):
    course= ""
    for i in user.courses:
      course += i + ", "
    return f"Name: {user.name} \nID: {user.ID} \nDepartment: {user.dept} \nAdvised Courses: {course[:-2]}"

rakib = Student("Rakib", 12301455, "CSE")
print("1***********************")
usis_obj = Usis()
print("2***********************")
usis_obj.login(rakib)
print("3***********************")
usis_obj.advising(rakib)
print("4***********************")
rakib.email = "rakib@hotmail.com"
rakib.password = "1234"
print("5***********************")
usis_obj.login(rakib)
print("6***********************")
usis_obj.advising(rakib)
print("7***********************")
usis_obj.advising(rakib, "CSE110", "PHY111", "MAT110", "CSE260")
print("8***********************")
usis_obj.advising(rakib, "CSE110", "PHY111", "MAT110")
print("9***********************")
print(usis_obj.individualDetails(rakib))

#task 6
class Train:
  def __init__(self, name, *stops):
    self.name = name
    self.stops = stops
    self.start = stops[0]
    self.end = stops[-1]
    self.passen = {}
    print(f"Welcome aboard on {self.name} \nStart: {self.start} \nDestination: {self.end}")
  def addPassenger(self, *passen):
    for i in passen:
      if (not i.start): #if (i.start == None):
        i.start = self.start
      if (not i.end):
        i.end = self.end
      print(f"{i.name} welcome aboard")
      self.passen[i.name] = [i.start, i.end, 100*(self.stops.index(i.end)-self.stops.index(i.start))]
  def allPassengerDetails(self):
    for i in self.passen:
      print(f"Name: {i}, Start: {self.passen[i][0]}, Destination: {self.passen[i][1]}, Fair: ${self.passen[i][2]}")
class Passenger:
  def __init__(self, name, start = None, end = None):
    self.name = name
    self.start = start
    self.end = end
#driver code
t1 = Train('T1-Express','New York','Manhattan','Brooklyn','Boston')
print("1========================")
p1 =Passenger("Naruto")
t1.addPassenger(p1)
p2 = Passenger("Sasuke","Manhattan")
p3 = Passenger("Hinata","Manhattan","Brooklyn")
print("2========================")
t1.addPassenger(p2,p3)
print("3========================")
t1.allPassengerDetails()
print("4========================")
t2 = Train('Europe-Express','London','Paris','Brussels','Turkey')
print("5========================")
p4 =Passenger("Max","London","Brussels")
p5 = Passenger("Eleven","Paris")
p6 = Passenger("Mike","Brussels")
t2.addPassenger(p4,p5,p6)
print("6========================")
t2.allPassengerDetails()

#task 7
class BracuStudent:
  def __init__(self, name, home):
    self.name = name
    self.home = home
    self.buspass = False
  def get_pass(self):
    self.buspass = True
  def show_details(self):
    print(f"Student Name: {self.name}\nLives in {self.home}\nHave Bus Pass? {self.buspass}")
class BracuBus:
  def __init__(self, route, max = 2):
    self.route = route
    self.max = max
    self.passen = []
  def board(self, *passen):
    if not passen:
      print("No passenger!")
      return
    for i in passen:
      if not i.buspass:
        print("You don't have bus pass!")
      elif i.home != self.route:
        print("You got on wrong bus!")
      elif len(self.passen) == self.max:
        print("Bus is full!")
      else:
        self.passen.append(i.name)
        print(f"{i.name} boarded the bus.")
  def show_details(self):
    print(f"Bus Route: {self.route}\nPassengers Count: {len(self.passen)} (Max: {self.max})\nPassengers On Board: {self.passen}")
#driver code
st1 = BracuStudent("Afif", "Mirpur")
print("1===========================")
st2 = BracuStudent("Shanto", "Motijheel")
st3 = BracuStudent("Taskin", "Mirpur")
st1.show_details()
st2.show_details()
print("2===========================")
st3.show_details()
print("3===========================")
bus1 = BracuBus("Mirpur")
bus2 = BracuBus("Azimpur", 5)
bus1.show_details()
bus2.show_details()
print("4===========================")
st2.get_pass()
st3.get_pass()
print("5===========================")
st2.show_details()
st3.show_details()
print("6===========================")
bus1.board()
print("7===========================")
bus1.board(st1, st2)
print("8===========================")
st1.get_pass()
st2.home = "Mirpur"
st1.show_details()
st2.show_details()
print("9===========================")
bus1.board(st1, st2, st3)
print("10===========================")
bus1.show_details()

#task 8
class Library:
  def __init__(self, name, libdict):
    self.name= name
    self.libdict= libdict
    self.borrower= {}
  def details(self):
    print(f"{self.name} Library details")
    print(f"Borrower details: \n{self.borrower}")
    print(f"Books availability: \n{self.libdict}")

class Reader:
  def __init__(self, name):
    self.name= name
    self.book= {}
  def borrow(self, library, *book):
    for i in book:
      if library.libdict[i] == 0:
        print(f"{i} books are not available at the moment.")
      elif sum(list(self.book.values())) >= 5:
        print("You cannot borrow more than 5 books.")
      else:
        library.libdict[i] -= 1
        if i in self.book:
          self.book[i] += 1
        else:
          self.book[i] = 1
        if self.name in library.borrower:
          library.borrower[self.name] += 1
        else:
          library.borrower[self.name] = 1
        print(f"{i} book is borrowed successfully.")
  def readerInfo(self, book = None):
    if book:
      print(f"{self.name}, you have {self.book[book]} {book} book(s) with you.")
    else:
      print(f"{self.name}, you have {sum(list(self.book.values()))} book(s) with you.")
      for i in self.book:
        print(f"Books on {i}: {self.book[i]}")

L1=Library('Dhaka',{'Arts':15,'Fiction':135,'Politics':2,'Science':11,'Poetry':15})
L1.details()
print("1----------------------")
r1=Reader('Aladdin')
r1.borrow(L1,'Arts','Fiction','Fiction','Politics')
print("2----------------------")
r1.borrow(L1,'Politics','Fiction')
print("3----------------------")
r1.readerInfo()
print("4----------------------")
r1.readerInfo('Fiction')
print("5----------------------")
L1.details()
print("6----------------------")
r2=Reader('Jasmine')
r2.borrow(L1,'Politics','Poetry')
print("7----------------------")
r2.readerInfo()
print("8----------------------")
L1.details()