# -*- coding: utf-8 -*-
"""CSE111-6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QvGP83p5nvunuzULK6OsN9CcHxU8NdfQ
"""

#task 1
class Student:
  ID= 0
  def __init__(self, name, dept, age, cg):
    self.name= name
    self.dept= dept
    self.age= age
    self.cg= cg
    Student.ID +=1
  def showDetails(self):
    print(f"ID: {Student.ID} \nName: {self.name} \nDepartment: {self.dept} \nAge: {self.age} \nCGPA: {self.cg}")
  @classmethod
  def from_String(cls, a):
    l= a.split("-")
    return cls(l[0], l[1], l[2], l[3])

s1 = Student("Samin", "CSE", 21, 3.91)
s1.showDetails()
print("-----------------------")
s2 = Student("Fahim", "ECE", 21, 3.85)
s2.showDetails()
print("-----------------------")
s3 = Student("Tahura", "EEE", 22, 3.01)
s3.showDetails()
print("-----------------------")
s4 = Student.from_String("Sumaiya-BBA-23-3.96")
s4.showDetails()

#task 2
class Assassin:
  asn= 0
  def __init__(self, name, sr):
    self.name= name
    self.sr= sr
    Assassin.asn +=1
  def printDetails(self):
    print(f"Name: {self.name} \nSuccess rate: {self.sr}% \nTotal number of Assassin: {Assassin.asn}")
  @classmethod
  def failureRate(cls, name, fr):
    return Assassin(name, 100-fr)
  @classmethod
  def failurePercentage(cls, name, frr):
    frr= 100-int(frr[:-1])
    return Assassin(name, frr)

john_wick = Assassin('John Wick', 100)
john_wick.printDetails()
print('================================')
nagisa = Assassin.failureRate("Nagisa", 20)
nagisa.printDetails()
print('================================')
akabane = Assassin.failurePercentage("Akabane", "10%")
akabane.printDetails()

#task 3
class Passenger:
  count = 0
  def __init__(self, name):
    self.name = name
    self.weight = 0
    Passenger.count += 1
  def set_bag_weight(self, weight):
    self.weight = weight
  def printDetail(self):
    if self.weight <= 20:
      fare = 450
    elif self.weight in range(21,51):
      fare = 500
    else:
      fare = 550
    print(f"Name: {self.name}\nBus Fare: {fare} taka")

print("Total Passenger:", Passenger.count)
p1 = Passenger("Jack")
p1.set_bag_weight(90)
p2 = Passenger("Carol")
p2.set_bag_weight(10)
p3 = Passenger("Mike")
p3.set_bag_weight(25)
print("=========================")
p1.printDetail()
print("=========================")
p2.printDetail()
print("=========================")
p3.printDetail()
print("=========================")
print("Total Passenger:", Passenger.count)

#task 4
class Travel:
  count = 0
  def __init__(self, source, destination):
    self.source = source
    self.destination = destination
    self.time = "1:00"
    Travel.count += 1
  def set_source(self, source):
    self.source = source
  def set_destination(self, destination):
    self.destination = destination
  def set_time(self, time):
    self.time = f"{time}:00"
  def display_travel_info(self):
    return f"Source: {self.source}\nDestination: {self.destination}\nFlight Time: {self.time}"
print("No. of Traveller =", Travel.count)
print("=======================")
t1 = Travel("Dhaka","India")
print(t1.display_travel_info())
print("=======================")
t2 = Travel("Kuala Lampur","Dhaka")
t2.set_time(23)
print(t2.display_travel_info())
print("=======================")
t3 = Travel("Dhaka","New_Zealand")
t3.set_time(15)
t3.set_destination("Germany")
print(t3.display_travel_info())
print("=======================")
t4 = Travel("Dhaka","India")
t4.set_time(9)
t4.set_source("Malaysia")
t4.set_destination("Canada")
print(t4.display_travel_info())
print("=======================")
print("No. of Traveller =", Travel.count)

#task 5
class Employee:
  def __init__(self, name, workingPeriod):
    self.name = name
    self.workingPeriod = workingPeriod
  @classmethod
  def employeeByJoiningYear(cls, name, year):
    return cls(name, 2023-year)
  @staticmethod
  def experienceCheck(year, gender):
    exp =""
    if gender == "male":
      gender = "He"
    elif gender == "female":
      gender = "She"
    if year < 3:
      exp = "not"
    return f"{gender} is {exp} experienced"
employee1 = Employee('Dororo', 3)
employee2 = Employee.employeeByJoiningYear('Harry', 2016)
print(employee1.workingPeriod)
print(employee2.workingPeriod)
print(employee1.name)
print(employee2.name)
print(Employee.experienceCheck(2, "male"))
print(Employee.experienceCheck(3, "female"))

#task 6
class Laptop:
  laptopCount = 0
  def __init__(self, name, quantity):
    self.name = name
    self.count = quantity
    Laptop.laptopCount += quantity
  @staticmethod
  def advantage():
    print("Laptops are portable")
  @classmethod
  def resetCount(cls):
    cls.laptopCount = 0
#driver code
lenovo = Laptop("Lenovo", 5)
dell = Laptop("Dell", 7)
print(lenovo.name, lenovo.count)
print(dell.name, dell.count)
print("Total number of Laptops", Laptop.laptopCount)
Laptop.advantage()
Laptop.resetCount()
print("Total number of Laptops", Laptop.laptopCount)

#task 7
class Cat:
  Number_of_cats = 0
  def __init__(self, colour, action):
    self.colour = colour
    self.action = action
    Cat.Number_of_cats += 1
  def changeColor(self, colour):
    self.colour = colour
  def printCat(self):
    print(f"{self.colour} cat is {self.action}")
  @classmethod
  def no_parameter(cls):
    return cls("White", "sitting")
  @classmethod
  def first_parameter(cls, p1):
    return cls(p1, "sitting")
  @classmethod
  def second_parameter(cls, p2):
    return cls("Grey", p2)
#driver code
print("Total number of cats:", Cat.Number_of_cats)
c1 = Cat.no_parameter()
c2 = Cat.first_parameter("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c5 = Cat.second_parameter("playing")
print("=======================")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c5.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()
print("=======================")
print("Total number of cats:", Cat.Number_of_cats)

#task 8
import math
class Cylinder:
  radius= 5
  height= 18
  def __init__(self, radius, height):
    print(f"Default radius={Cylinder.radius} and height={Cylinder.height}.")
    Cylinder.radius= radius
    Cylinder.height= height
    print(f"Updated radius={Cylinder.radius} and height={Cylinder.height}.")
  @staticmethod
  def area(radius, height):
    area= 2*math.pi*radius**2 + 2*math.pi*radius*height
    print(f"Area: {area}")
  @staticmethod
  def volume(radius, height):
    volume= math.pi*radius**2*height
    print(f"Volume: {volume}")
  @classmethod
  def swap(cls, height, radius):
    return Cylinder(radius, height)
  @classmethod
  def changeFormat(cls, rh):
    return Cylinder(float(rh.split("-")[0]), float(rh.split("-")[1]))

c1 = Cylinder(0,0)
Cylinder.area(c1.radius,c1.height)
Cylinder.volume(c1.radius,c1.height)
print("===============================")
c2 = Cylinder.swap(8,3)
c2.area(c2.radius,c2.height)
c2.volume(c2.radius,c2.height)
print("===============================")
c3 = Cylinder.changeFormat("7-13")
c3.area(c3.radius,c3.height)
c3.volume(c3.radius,c3.height)
print("===============================")
Cylinder(0.3,5.56).area(Cylinder.radius,Cylinder.height)
print("===============================")
Cylinder(3,5).volume(Cylinder.radius,Cylinder.height)

#task 9
class Student:
  total = 0
  bractotal = 0
  othertotal = 0
  def __init__(self, name, dept, uni = "Brac University"):
    self.name = name
    self.dept = dept
    self.uni = uni
    Student.total += 1
    if uni == "Brac University":
      Student.bractotal += 1
    else:
      Student.othertotal += 1
  def individualDetail(self):
    print(f"Name: {self.name}\nDepartment: {self.dept}\nInstitution: {self.uni}")
  @classmethod
  def createStudent(cls, name, dept, uni = "Brac University"):
    return Student(name, dept, uni)
  @classmethod
  def printDetails(cls):
    print(f"Total Student(s): {cls.total}\nBrac University Student(s): {cls.bractotal}\nOther Institution Student(s): {cls.othertotal}")
Student.printDetails()
print('#########################')

mikasa = Student('Mikasa Ackerman', "CSE")
mikasa.individualDetail()
print('------------------------------------------')
Student.printDetails()

print('========================')

harry = Student.createStudent('Harry Potter', "Defence Against Dark Arts", "Hogwarts School")
harry.individualDetail()
print('-------------------------------------------')
Student.printDetails()

print('=========================')

levi = Student.createStudent("Levi Ackerman", "CSE")
levi.individualDetail()
print('--------------------------------------------')
Student.printDetails()

#task 10
class SultansDine:
  branchNo = 0
  sell = 0
  detail = []
  def __init__(self, name):
    self.name = name
    self.sell = 0
  def sellQuantity(self, qtty):
    if qtty < 10:
      self.sell += qtty*300
    elif qtty < 20:
      self.sell += qtty*350
    else:
      self.sell += qtty*400
    SultansDine.sell += self.sell
    SultansDine.detail.append((self.name, self.sell))
  def branchInformation(self):
    print(f"Branch Name: {self.name}\nBranch Sell: {self.sell} Taka")
  @classmethod
  def details(cls):
    print(f"Total Number of branch(s): {cls.branchNo}\nTotal Sell: {cls.sell} Taka")
    for i in cls.detail:
      print(f"Branch Name: {i[0]}, Branch Sell: {i[1]} Taka\nBranch consists of total sell's: {round((i[1]/SultansDine.sell*100), 2)}%")


SultansDine.details()
print('########################')
dhanmondi = SultansDine('Dhanmondi')
dhanmondi.sellQuantity(25)
dhanmondi.branchInformation()
print('-----------------------------------------')
SultansDine.details()

print('========================')

baily_road = SultansDine('Baily Road')
baily_road.sellQuantity(15)
baily_road.branchInformation()
print('-----------------------------------------')
SultansDine.details()

print('========================')

gulshan = SultansDine('Gulshan')
gulshan.sellQuantity(9)
gulshan.branchInformation()
print('-----------------------------------------')
SultansDine.details()

class Puzzle:
    x = 0
    def methodA(self):
        Puzzle.x = 5
        z = Puzzle.x + self.methodB(Puzzle.x)
        print(Puzzle.x, z)
        z = self.methodB(z + 2) + Puzzle.x
        print(Puzzle.x, z)
        self.methodB(Puzzle.x, z)
        print(Puzzle.x, z)
    def methodB(self, *args):
        if len(args) == 1:
            y = args[0]
            Puzzle.x = y + Puzzle.x
            print(Puzzle.x, y)
            return Puzzle.x + 3
        else:
            z, x = args
            z = z + 1
            x = x + 1
            print(z, x)
p = Puzzle()
p.methodA()
p.methodA()
p = Puzzle()
p.methodA()
p.methodB(7)