# -*- coding: utf-8 -*-
"""CSE111-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXikmJa4uo3JigY6PpdEdHEmV7_3-KuD
"""

#task 1
class DataType:
  def __init__(self, name, value):
    self.name = name
    self.value = value
data_type1 = DataType("Integer", 1234)
print(data_type1.name)
print(data_type1.value)
print('=====================')
data_type2 = DataType("String", "Hello")
print(data_type2.name)
print(data_type2.value)
print('=====================')
data_type3 = DataType("Float", 4.0)
print(data_type3.name)
print(data_type3.value)

#task 2
class Joker:
  def __init__(self, name, power, is_he_psycho):
    self.name= name
    self.power= power
    self.is_he_psycho= is_he_psycho
j1 = Joker('Heath Ledger', 'Mind Game', False)
print(j1.name)
print(j1.power)
print(j1.is_he_psycho)
print("=====================")
j2 = Joker('Joaquin Phoenix', 'Laughing out Loud', True)
print(j2.name)
print(j2.power)
print(j2.is_he_psycho)
print("=====================")
if j1 == j2:
    print('same')
else:
    print('different')
j2.name = 'Heath Ledger'
if j1.name == j2.name:
    print('same')
else:
    print('different')

#task 3
class Pokemon:
  def __init__(self, pokemon1_name, pokemon2_name, pokemon1_power, pokemon2_power, damage_rate):
    self.pokemon1_name= pokemon1_name
    self.pokemon2_name= pokemon2_name
    self.pokemon1_power= pokemon1_power
    self.pokemon2_power= pokemon2_power
    self.damage_rate= damage_rate
team_pika = Pokemon('pikachu', 'charmander', 90, 60, 10)
print('=======Team 1=======')
print('Pokemon 1:',team_pika.pokemon1_name, team_pika.pokemon1_power)
print('Pokemon 2:',team_pika.pokemon2_name, team_pika.pokemon2_power)
pika_combined_power = (team_pika.pokemon1_power + team_pika.pokemon2_power) * team_pika.damage_rate
print('Combined Power:', pika_combined_power)
team_bulb = Pokemon('bulbasaur', 'squirtle', 80, 70, 9)
print('=======Team 2=======')
print('Pokemon 1:',team_bulb.pokemon1_name, team_bulb.pokemon1_power)
print('Pokemon 2:',team_bulb.pokemon2_name, team_bulb.pokemon2_power)
bulb_combined_power = (team_bulb.pokemon1_power + team_bulb.pokemon2_power) * team_bulb.damage_rate
print('Combined Power:', bulb_combined_power)

#task 4
class Country:
  def __init__(self):
    self.name= "Bangladesh"
    self.continent= "Asia"
    self.capital= "Dhaka"
    self.fifa_ranking= 187
country = Country()
print('Name:',country.name)
print('Continent:',country.continent)
print('Capital:',country.capital)
print('Fifa Ranking:',country.fifa_ranking)
print('===================')
country.name = "Belgium"
country.continent = "Europe"
country.capital = "Brussels"
country.fifa_ranking = 1
print('Name:',country.name)
print('Continent:',country.continent)
print('Capital:',country.capital)
print('Fifa Ranking:',country.fifa_ranking)

#task 5
class DemonSlayer:
  def __init__(self, name, style, technique, kill):
    self.name= name
    self.style= style
    self.number_of_technique= technique
    self.kill= kill
tanjiro = DemonSlayer("Tanjiro", "Water Breathing", 10, 10)
print('Name:',tanjiro.name)
print('Fighting Style:',tanjiro.style)
print(f'Knows {tanjiro.number_of_technique} technique(s) and has killed {tanjiro.kill} demon(s)')
print('===================')
zenitsu = DemonSlayer("Zenitsu", "Thunder Breathing", 1, 4)
print('Name:',zenitsu.name)
print('Fighting Style:',zenitsu.style)
print(f'Knows {zenitsu.number_of_technique} technique(s) and has killed {zenitsu.kill} demon(s)')
print('===================')
inosuke = DemonSlayer("Inosuke", "Beast Breathing", 5, 7)
print('Name:',inosuke.name)
print('Fighting Style:',inosuke.style)
print(f'Knows {inosuke.number_of_technique} technique(s) and has killed {inosuke.kill} demon(s)')
print('===================')
print(f'{tanjiro.name}, {zenitsu.name}, {inosuke.name} knows total {tanjiro.number_of_technique + zenitsu.number_of_technique + inosuke.number_of_technique} techniques')
print(f'They have killed total {tanjiro.kill + zenitsu.kill + inosuke.kill} demons')

#task 6
class box:
  def __init__(self, dimensions):
    self.height= dimensions[0]
    self.width= dimensions[1]
    self.breadth= dimensions[2]
    print("Creating a Box!")
    print(f"Volume of the box is {self.height*self.width*self.breadth} cubic units.")
print("Box 1")
b1 = box([10,10,10])
print("=========================")
print("Height:", b1.height)
print("Width:", b1.width)
print("Breadth:", b1.breadth)
print("-------------------------")
print("Box 2")
b2 = box((30,10,10))
print("=========================")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
b2.height = 300
print("Updating Box 2!")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
print("-------------------------")
print("Box 3")
b3 = b2
print("Height:", b3.height)
print("Width:", b3.width)
print("Breadth:", b3.breadth)

#task 7
class buttons:
  def __init__(self, word, spaces, border):
    self.word= word
    self.spaces= spaces
    self.border= border
    self.number= 1 + spaces + len(word) + spaces + 1
    print(f"{word} Button Specifications:")
    print(f"Button Name: {word}")
    print(f"Number of the border characters for the top and the bottom: {self.number}")
    print(f"Number of spaces between the left side border and the first character of the button name: {border}")
    print(f"Number of spaces between the right side border and the last character of the button name: {border}")
    print(f"Characters representing the borders: {border}")
    print(border*self.number)
    print(border + " "*spaces + word + " "*spaces + border)
    print(border*self.number)
word = "CANCEL"
spaces = 10
border = 'x'
b1 = buttons(word, spaces, border)
print("=======================================================")
b2 = buttons("Notify",3, '!')
print("=======================================================")
b3 = buttons('SAVE PROGRESS', 5, '$')

#task 8
class Calculator:
  def __init__(self):
    print("Let's Calculate!")
    self.input1= int(input("Value 1: "))
    self.operator= input("Operator: ")
    self.input2= int(input("Value 2: "))
  def add(self):
    print(f"Result: {self.input1 + self.input2}")
  def subtract(self):
    print(f"Result: {self.input1 - self.input2}")
  def multiply(self):
    print(f"Result: {self.input1 * self.input2}")
  def divide(self):
    print(f"Result: {self.input1 / self.input2}")

calculate = Calculator()
if calculate.operator == "+":
  calculate.add()
if calculate.operator == "-":
  calculate.subtract()
if calculate.operator == "*":
  calculate.multiply()
if calculate.operator == "/":
  calculate.divide()

#task 9
class Patient:
  def __init__(self, name, age, weight, height):
    self.name= name
    self.age= age
    self.weight= weight
    self.height= height
    self.BMI= self.weight/((self.height/100)**2)
  def printDetails(self):
    print(f"Name: {self.name}\nAge: {self.age}\nWeight: {self.weight} kg\nHeight: {self.height} cm\nBMI: {self.BMI}")
p1 = Patient("A", 55, 63.0, 158.0)
p1.printDetails()
print("====================")
p2 = Patient("B", 53, 61.0, 149.0)
p2.printDetails()

#task 10
class Vehicle:
  def __init__(self):
    self.x_axis= 0
    self.y_axis= 0
  def moveUp(self):
    self.y_axis += 1
  def moveDown(self):
    self.y_axis -= 1
  def moveLeft(self):
    self.x_axis -= 1
  def moveRight(self):
    self.x_axis += 1
  def print_position(self):
    print((self.x_axis, self.y_axis))
car = Vehicle()
car.print_position()
car.moveUp()
car.print_position()
car.moveLeft()
car.print_position()
car.moveDown()
car.print_position()
car.moveRight()

#task 11
class Shape:
  def __init__(self, shape, input1, input2):
    self.shape = shape
    self.input1 = input1
    self.input2 = input2
  def area(self):
    if self.shape == "Triangle":
      print(f"Area: {1/2*self.input1*self.input2}")
    elif self.shape == "Square":
      print(f"Area: {self.input1*self.input2}")
    elif self.shape == "Rhombus":
      print(f"Area: {1/2*self.input1*self.input2}")
    elif self.shape == "Rectangle":
      print(f"Area: {self.input1*self.input2}")
    else:
      print("Area: Shape unknown")
#driver code
triangle = Shape("Triangle",10,25)
triangle.area()
print("==========================")
square = Shape("Square",10,10)
square.area()
print("==========================")
rhombus = Shape("Rhombus",18,25)
rhombus.area()
print("==========================")
rectangle = Shape("Rectangle",15,30)
rectangle.area()
print("==========================")
trapezium = Shape("Trapezium",15,30)
trapezium.area()

#task 12
class Calculator:
  def __init__(self):
    self.calculation = ""
    print("Calculator is ready!")
  def calculate(self, input1, input2, operator):
    if operator == "+":
      result = input1 + input2
    elif operator == "-":
      result = input1 - input2
    elif operator == "*":
      result = input1 * input2
    elif operator == "/":
      result = input1 / input2
    self.calculation = f"{input1} {operator} {input2} = {result}"
    return result
  def showCalculation(self):
    print(self.calculation)
#driver code
c1 = Calculator()
print("==================")
val = c1.calculate(10, 20, '+')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 10, '-')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 5, '*')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 16, '/')
print("Returned value:", val)
c1.showCalculation()

#task 13
class Programmer:
  def __init__(self, name, lang, exp):
    self.name = name
    self.language = lang
    self.exp = exp
    print(f"Horray! A new programmer is born")
  def printDetails(self):
    print(f"Name: {self.name}\nLanguage: {self.language}\nExperience: {self.exp} years.")
  def addExp(self,add_exp):
    print(f"Updating experience of {self.name}")
    self.exp += add_exp
#driver code
p1 = Programmer("Ethen Hunt", "Java", 10)
p1.printDetails()
print('--------------------------')
p2 = Programmer("James Bond", "C++", 7)
p2.printDetails()
print('--------------------------')
p3 = Programmer("Jon Snow", "Python", 4)
p3.printDetails()
p3.addExp(5)
p3.printDetails()

"""TRACE:

"""

#task 14
class Test:
    def __init__(self):
        self.sum = 0
        self.y = 0
    def methodA(self):
        x=0
        y=0
        y = y + 7
        x = y + 11
        self.sum = x + y
        print(x , y, self.sum)
    def methodB(self):
        x = 0
        self.y = self.y + 11
        x = x + 33 + self.y
        self.sum = self.sum + x + self.y
        print(x , self.y, self.sum)
t1 = Test()
t1.methodA()
t1.methodA()
t1.methodB()
t1.methodB()

#task 15
class Scope:
    def __init__(self):
        self.x, self.y = 1, 100
    def met1(self):
        x = 3
        x = self.x + 1
        self.y = self.y + self.x + 1
        x = self.y + self.met2() + self.y
        print(x, self.y)
    def met2(self):
        y = 0
        print(self.x, y)
        self.x = self.x + y
        self.y = self.y + 200
        return self.x + y
q2 = Scope()
q2.met1()
q2.met2()
q2.met1()
q2.met2()

#task 16
class Test3:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x, y = 2, 3
        msg = [0]
        msg[0] = 3
        y = self.y + msg[0]
        self.methodB(msg, msg[0])
        x = self.y + msg[0]
        self.sum = x + y + msg[0]
        print(x, y, self.sum)
    def methodB(self, mg2, mg1):
        x = 0
        self.y = self.y + mg2[0]
        x = x + 33 + mg1
        self.sum = self.sum + x + self.y
        mg2[0] = self.y + mg1
        mg1 = mg1 + x + 2
        print(x, self.y, self.sum)

t3 = Test3()
t3.methodA()
t3.methodA()
t3.methodA()
t3.methodA()

#task 17
class Test5:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x = 0
        z = 0
        while (z < 5):
            self.y = self.y + self.sum
            x = self.y + 1
            print(x, self.y, self.sum)
            self.sum = self.sum + self.methodB(x, self.y)
            z += 1
    def methodB(self, m, n):
        x = 0
        sum = 0
        self.y = self.y + m
        x = n - 4
        sum = sum + self.y
        print(x, self.y, sum)
        return self.sum

t5 = Test5()
t5.methodA()

