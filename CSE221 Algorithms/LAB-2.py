# -*- coding: utf-8 -*-
"""221-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t6OGJgILKF-JYtKOWlLnVvQM4DDoSvi5
"""

#Task 1_1

input_file = open("input1_1.txt" , "r")
output_file = open("output1_1.txt" , "w")

point, sum = input_file.readline().strip().split(" ")
l1 = input_file.readline().strip().split(" ")

val = False
for i in range(int(point)):
  for j in range(i+1, int(point)):
    if int(l1[i]) + int(l1[j]) == int(sum):
      val = f"{i+1} {j+1}"
      break
  if val:
    break
else:
  val = "IMPOSSIBLE"
output_file.write(str(val))

input_file.close()
output_file.close()

#Task 1_2

input_file = open("input1_2.txt" , "r")
output_file = open("output1_2.txt" , "w")

point, sum = input_file.readline().strip().split(" ")
l1 = input_file.readline().strip().split(" ")

m = 0
n = int(point) - 1

while m != n:
  if int(l1[m]) + int(l1[n]) > int(sum):
    n -= 1
  elif int(l1[m]) + int(l1[n]) < int(sum):
    m += 1
  elif int(l1[m]) + int(l1[n]) == int(sum):
    output_file.write(f"{m + 1} {n + 1}")
    break

else:
  output_file.write(f"IMPOSSIBLE")

input_file.close()
output_file.close()

#Task 2_1

input_file = open("input2_1.txt" , "r")
output_file = open("output2_1.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
point1 += int(input_file.readline().strip())
l1 += input_file.readline().strip().split(" ")

def merge_sort(l1):
  if len(l1) <= 1:
    return l1
  mid = len(l1)//2
  l = l1[ : mid]
  r = l1[mid : ]
  left = merge_sort(l)
  right = merge_sort(r)
  return merge(left, right)

def merge(l, r):
  out = []
  while (l and r):
    if int(l[0]) < int(r[0]):
      out.append(int(l[0]))
      l.pop(0)
    else:
      out.append(int(r[0]))
      r.pop(0)
  if l:
    out += l
  if r:
    out += r
  return out

out_arr = merge_sort(l1)
for i in out_arr:
  output_file.write(f'{int(i)} ')

input_file.close()
output_file.close()

#Task 2_2

input_file = open("input2_2.txt" , "r")
output_file = open("output2_2.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
point2 = int(input_file.readline().strip())
l2 = input_file.readline().strip().split(" ")
l3= []

m = 0
n = 0

while True:
  if int(l1[m]) > int(l2[n]):
    l3.append(int(l2[n]))
    n += 1
  elif int(l1[m]) <= int(l2[n]):
    l3.append(int(l1[m]))
    m += 1
  if m == len(l1):
    l3 += l2[n: ]
    break
  if n == len(l2):
    l3 += l1[m: ]
    break

for i in l3:
  output_file.write(f"{int(i)} ")

input_file.close()
output_file.close()

#Task 3

input_file = open("input3.txt" , "r")
output_file = open("output3.txt" , "w")

point = int(input_file.readline().strip())
l1 = []
for i in range(point):
  m , n = input_file.readline().strip().split()
  l1 += [[int(m), int(n)]]

def merge_sort(l1):
  if len(l1) <= 1:
    return l1
  mid = len(l1)//2
  l = l1[ : mid]
  r = l1[mid : ]
  left = merge_sort(l)
  right = merge_sort(r)
  return merge(left, right)

def merge(l, r):
  out = []
  while (l and r):
    if l[0][1] < r[0][1]:
      out.append(l[0])
      l.pop(0)
    else:
      out.append(r[0])
      r.pop(0)
  if l:
    out += l
  if r:
    out += r
  return out

l1 = merge_sort(l1)
current = [l1[0]]
temp = l1[0]
count = 1
for i in l1[1 : ]:
  if i[0] >= temp[1]:
    current += [i]
    temp = i
    count += 1

output_file.write(f"{str(count)}\n")
for i in current:
    output_file.write(f"{i[0]} {i[1]}\n")

input_file.close()
output_file.close()

#Task 4

input_file = open("input4.txt" , "r")
output_file = open("output4.txt" , "w")

point, num = input_file.readline().strip().split()
point, num = int(point), int(num)
l1 = []
for i in range(point):
  m , n = input_file.readline().strip().split()
  l1 += [[int(m), int(n)]]

def merge_sort(l1):
  if len(l1) <= 1:
    return l1
  mid = len(l1)//2
  l = l1[ : mid]
  r = l1[mid : ]
  left = merge_sort(l)
  right = merge_sort(r)
  return merge(left, right)

def merge(l, r):
  out = []
  while (l and r):
    if l[0][1] < r[0][1]:
      out.append(l[0])
      l.pop(0)
    else:
      out.append(r[0])
      r.pop(0)
  if l:
    out += l
  if r:
    out += r
  return out

l1 = merge_sort(l1)
current = [l1[0]]
count = 1
for i in l1[1 : ]:
  change = False
  for j in range(len(current)):
    if i[0] >= current[j][1]:
      current[j] = i
      count += 1
      change = True
      break
  if len(current) < num and not change:
    current.append(i)
    count += 1
output_file.write(f"{str(count)}\n")

input_file.close()
output_file.close()