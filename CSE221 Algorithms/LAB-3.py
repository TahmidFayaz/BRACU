# -*- coding: utf-8 -*-
"""221-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gRKacODwP5vrvn589-lad39QuJ-zkVp2
"""

#Lab 3 Evaluation
input_file = open("input1.txt" , "r")
output_file = open("output1.txt" , "w")

e1 = int(input_file.readline().strip())
wl =[]

for i in range(e1):
  s, d = input_file.readline().strip().split()
  wl += [[int(s), int(s)+int(d)]]
wl.sort(key = lambda x: x[1])

current = wl[0]
count = 1
for i in wl[1:]:
  if i[0] >= current[1]:
    current = i
    count += 1

output_file.write(f"{count*50}$")

input_file.close()
output_file.close()
#22201295

#Task 1

input_file = open("input1.txt" , "r")
output_file = open("output1.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")

def merge_sort(l1):
  if len(l1) <= 1:
    return l1
  mid = len(l1)//2
  l = l1[ : mid]
  r = l1[mid : ]
  left = merge_sort(l)
  right = merge_sort(r)
  return merge(left, right)

def merge(l, r):
  out = []
  while (l and r):
    if int(l[0]) < int(r[0]):
      out.append(int(l[0]))
      l.pop(0)
    else:
      out.append(int(r[0]))
      r.pop(0)
  if l:
    out += l
  if r:
    out += r
  return out

out_arr = merge_sort(l1)
for i in out_arr:
  output_file.write(f"{int(i)} ")

input_file.close()
output_file.close()

#Task 2

input_file = open("input2.txt" , "r")
output_file = open("output2.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
for i in range(len(l1)):
  l1[i] = int(l1[i])

def maxed_find(l1):
  if len(l1) <= 1:
    return l1
  mid = len(l1)//2
  l = l1[ : mid]
  r = l1[mid : ]
  left = maxed_find(l)
  right = maxed_find(r)
  return maxed(left, right)

def maxed(l, r):
  out = [l[0]]
  while (l and r):
    if l[0] >= out[0]:
      out = [l[0]]
      l.pop(0)
    elif r[0] > out[0]:
      out = [r[0]]
      r.pop(0)
  if l and l[0] > out[0]:
    out = [l[0]]
  if r and r[0] >= out[0]:
    out = [r[0]]
  return out

max_value = maxed_find(l1)

output_file.write(f"{max_value[0]}")

input_file.close()
output_file.close()

#Task 3
input_file = open("input3.txt" , "r")
output_file = open("output3.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
for i in range(len(l1)):
  l1[i] = int(l1[i])

def inv_count(l1):
  if len(l1) <= 1:
    return l1, 0
  mid = len(l1)//2
  l  = l1[ : mid]
  r  = l1[mid : ]
  left, left_inv = inv_count(l)
  right, right_inv = inv_count(r)
  mid, mid_inv = inversions(left, right)
  return mid, (left_inv + right_inv + mid_inv)

def inversions(left, right):
  out = []
  i = j = mid_inv = 0

  while i < len(left) and j < len(right):
    if left[i] <= right[j]:
      out.append(left[i])
      i += 1
    else:
      out.append(right[j])
      mid_inv += len(left) - i
      j += 1
  out += left[i:]
  out += right[j:]

  return out, mid_inv

output_file.write(str(inv_count(l1)[1]))
input_file.close()
output_file.close()

#Task 4
input_file = open("input4.txt" , "r")
output_file = open("output4.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
for i in range(len(l1)):
  l1[i] = int(l1[i])

def find_pair(l1):
  if len(l1) <= 1:
    return l1, 0
  mid = len(l1)//2
  l  = l1[ : mid]
  r  = l1[mid : ]
  left, left_pair = find_pair(l)
  right, right_pair = find_pair(r)
  mid, mid_pair = pair_count(left, right)
  return mid, max([left_pair, right_pair, mid_pair])

def pair_count(left, right):
  pair_l = left[0]
  for i in range(len(left)):
    if left[i] > pair_l:
      pair_l = left[i]
  pair_r = right[0]
  for i in range(len(right)):
    if abs(right[i]) > pair_r:
      pair_r = abs(right[i])

  return left + right, pair_l + pair_r**2

output_file.write(str(find_pair(l1)[1]))

input_file.close()
output_file.close()

#Task 5
input_file = open("input5.txt" , "r")
output_file = open("output5.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
for i in range(len(l1)):
  l1[i] = int(l1[i])

def partition(l1, low, high):
  pivot = l1[high]
  i = low - 1
  for j in range(low, high):
    if l1[j] <= pivot:
      i += 1
      l1[i], l1[j] = l1[j], l1[i]
  l1[i + 1], l1[high] = l1[high], l1[i + 1]
  return i + 1

def quicksort(l1, low, high):
  if low < high:
    pivot = partition(l1, low, high)
    quicksort(l1, low, pivot - 1)
    quicksort(l1, pivot + 1, high)

quicksort(l1, 0, point1 - 1)
for i in l1:
  output_file.write(f"{i} ")

input_file.close()
output_file.close()

#Task 6
input_file = open("input6.txt" , "r")
output_file = open("output6.txt" , "w")

point1 = int(input_file.readline().strip())
l1 = input_file.readline().strip().split(" ")
for i in range(len(l1)):
  l1[i] = int(l1[i])

def partition(l1, low, high):
  pivot = l1[high]
  i = low - 1
  for j in range(low, high):
    if l1[j] <= pivot:
      i += 1
      l1[i], l1[j] = l1[j], l1[i]
  l1[i + 1], l1[high] = l1[high], l1[i + 1]
  return i + 1

def find_smallest(l1, low, high, k):
  if (k > 0 and k <= high - low + 1):
    pos = partition(l1, low, high)
    if (pos - low == k - 1):
      return l1[pos]
    if (pos - low > k - 1):
      return find_smallest(l1, low, pos - 1, k)
    return find_smallest(l1, pos + 1, high, k - pos + low - 1)

  return None

queries = int(input_file.readline().strip())
for i in range(queries):
  k = int(input_file.readline().strip())
  output_file.write(f"{find_smallest(l1, 0, point1-1, k)}\n")

input_file.close()
output_file.close()

l1 = input().split()
for i in range(len(inp)):
  l1[i] = [int(l1[i]), i]

def find_pair(l1):
  if len(l1) <= 1:
    return l1[0][0], l1, l1[0][0]
  mid = len(l1)//2
  l  = l1[ : mid]
  r  = l1[mid : ]
  left, left_pair, maxL = find_pair(l)
  right, right_pair, maxR = find_pair(r)
  mid, mid_pair, max_mid = pair_count(left, right)
  if max([left_pair, right_pair, mid_pair]) == left_pair:
    return mid, max([left_pair, right_pair, mid_pair]), maxL
  elif max([left_pair, right_pair, mid_pair]) == right_pair:
    return mid, max([left_pair, right_pair, mid_pair]), maxR
  else:
    return mid, max([left_pair, right_pair, mid_pair]), max_mid

def pair_count(left, right):
  pair_l = left[0]
  for i in range(len(left)):
    if abs(left[i][0]) > pair_l[0]:
      pair_l = abs(left[i])
  pair_r = right[0]
  for i in range(len(right)):
    if right[i][0] > pair_r[0]:
      pair_r = right[i]

  return left + right, pair_l**2 + pair_r**3, (pair_l, pair_r)

ans = find_pair(l1)[2]

print(f"{ans[0][1]} {ans[1][1]}")



#22201295