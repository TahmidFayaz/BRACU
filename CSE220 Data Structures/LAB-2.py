# -*- coding: utf-8 -*-
"""Lab2_SheikhMdTahmid_22299522.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfdfYxRRLcAsBB3lwpNxmYacYr4PH32w
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

#You must run this cell to print matrix and for the driver code to work
def print_matrix(m):
  row,col = m.shape
  for i in range(row):
    c = 1
    print('|', end='')
    for j in range(col):
      c += 1
      if(len(str(m[i][j])) == 1):
        print(' ',m[i][j], end = '  |')
        c += 6
      else:
        print(' ',m[i][j], end = ' |')
        c += 6
    print()
    print('-'*(c-col))

"""Task 1: Zigzag Walk"""

#Task1

def walk_zigzag(floor):

  row,col=floor.shape
  for j in range(col):
    if j%2==0:
      for i in range(row):
        if(i+j)%2==0:
          print(floor[i][j],end=" ")
    else:
      for i in range(row-1,-1,-1):
        if(i+j)%2==0:
          print(floor[i][j],end=" ")
    print()


floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )
print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)

"""Task 2: Row Rotation Policy of BRACU Classroom"""

#Task2

def row_rotation(exam_week, seat_status):

  row,col=seat_status.shape
  result=np.full((row,col),None)

  k=exam_week%row

  for i in range(row):
    for j in range(col):
      row_index=(i+k-1)% row
      result[row_index][j]=seat_status[i][j]


  for i in range(row):
    for j in range(col):
      if "AA" in result[row_index][j]:

        x=row_index+1

  return f"{x}\n\n{result}"

seat_status = np.array([[ 'A' , 'B' , 'C' , 'D' , 'E'],
                  ['F' , 'G' , 'H' , 'I' , 'J'],
                  ['K' , 'L' , 'M' , 'N' , 'O'],
                  ['P' , 'Q' , 'R' , 'S' , 'T'],
                  ['U' , 'V' , 'W' , 'X' , 'Y'],
                  ['Z' , 'AA' , 'BB' , 'CC' , 'DD']])


exam_week=3
print_matrix(seat_status)
print()
row_number=row_rotation(exam_week, seat_status) #This should print modified seat status after rotation
print(f'Your friend AA will be on row {row_number}') #This should print Your friend AA will be on row 2

"""Task 3: Matrix Manipulation"""

#Task3

def reverse_Matrix(matrix):

  row,col=matrix.shape
  result=np.zeros((row,col),int)

  for i in range(row):
    for j in range(col):
      result[i][j]=matrix[i][col-1-j]


  for i in range(row//2):
    for j in range(col):
      result[i][j],result[row-1-i][j]=result[row-1-i][j],result[i][j]

  return result

matrix = np.array([
[14,  8,  0,  4],
[9,  8,  13,  13],
[9,  3,  1,  4],
[2,  10,  13,  6]
])

print_matrix(matrix)
print('################')
print()
reversed_matrix = reverse_Matrix(matrix)
print_matrix(reversed_matrix)

#This should print
#|  6  |  13 |  10 |  2  |
#-------------------------
#|  4  |  1  |  3  |  9  |
#-------------------------
#|  13  |  13  |  8 |  9 |
#-------------------------
#|  4 |  0  |  8  |  14  |
#-------------------------

"""Task 4: Chess Piece"""

#Task4

def show_knight_move(knight):

  row,col=knight
  result=np.zeros((8,8),int)
  result[row,col]=66
  steps=4
  for i in range(4):
    if i<2:
      if i%2==0:
        result[row+2,col+1]=3
        result[row+1,col+2]=3
      else:
        result[row+2,col-1]=3
        result[row+1,col-2]=3
    else:
      if i%2==0:
        result[row-2,col+1]=3
        result[row-1,col+2]=3
      else:
        result[row-2,col-1]=3
        result[row-1,col-2]=3
  return result


knight = (3,4)
chess_board = show_knight_move(knight)
print_matrix(chess_board)
#This Should print
#| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 3 | 0 | 3 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 3 | 0 | 0 | 0 | 3 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 0 | 66 | 0 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 3 | 0 | 0 | 0 | 3 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 3 | 0 | 3 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
#-----------------------------------------

"""Task 5: Matrix Compression"""

#Task5

def compress_matrix(mat):
  row,col=mat.shape
  result=np.zeros((2,2),int)

  for i in range(0,row,2):
    for j in range(0,col,2):
      total=mat[i][j]+mat[i+1][j]+mat[i][j+1]+mat[i+1][j+1]

      result[i//2][j//2]=total

  return result


mat=np.array([[1,2,3,4],
                 [5,6,7,8],
                 [1,3,5,2],
                 [-2,0,6,-3]
                 ])
print_matrix(mat)
print('################')
print()
returned_array=compress_matrix(mat)
print_matrix(returned_array)
#This should print
#|  14  |  22 |
#--------------
#|  2  |  10  |
#--------------

"""Task 6: Game Arena"""

#Task6

def play_game(arena):

    row,col=arena.shape

    total=0

    for i in range(row):
        for j in range(col):
          if arena[i][j]!=0 and arena[i][j]%50==0:
            counter=0
            if (i+1)==row :
               if arena[i][j+1]==2:
                counter+=1
               if arena[i-1][j]==2:
                counter+=1
               if arena[i][j-1]==2:
                counter+=1
            elif (j+1)==col:
               if arena[i+1][j]==2:
                counter+=1
               if arena[i-1][j]==2:
                counter+=1
               if arena[i][j-1]==2:
                counter+=1
            else:
              if arena[i+1][j]==2:
                counter+=1
              if arena[i][j+1]==2:
                counter+=1
              if arena[i-1][j]==2:
                counter+=1
              if arena[i][j-1]==2:
                counter+=1
            total+=counter

    result=total*2

    if result<10:
        return f"Points gained:{result} .Your team is out"
    else:
        return f"Points Gained:{result} .Your team has survived the game."

arena=np.array([[0,2,2,0],
                [50,1,2,0],
                [2,2,2,0],
                [1,100,2,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 6. Your team is out.

print(".....................")
arena=np.array([[0,2,2,0,2],
                [1,50,2,1,100],
                [2,2,2,0,2],
                [0,200,2,0,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 14. Your team has survived the game.