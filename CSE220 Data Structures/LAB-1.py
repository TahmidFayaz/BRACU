# -*- coding: utf-8 -*-
"""Lab01_TahmidHossain_22299522.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PI78TzCfmDEGAG4uytnFoKGrdJF5fP_O

**Instructions to Follow (Failing to follow these will result mark deductions).**
1. First of all, From colab File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
2. You can not use any built-in function except len()

3. You can not use any other python collections except array (e.g: tuple, dictionaries etc.).

4. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be 4 approaches.

 i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

 ii. arr = np.array([0] * 10) #Initializing an array length 10 with values zero.

 iii. arr = np.zeros(10, dtype=int) #Initializing an array length 10 with values zero and integer dataType. By default, dtype is float.

 iv. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

"""You will see the status Accepted after completion if your code is correct.

If your function is wrong you will see wrong [correction percentage]

Do not change the driver code statements. You can only change the input values to test your code.

PART 2
"""

#Assignment Part-2
#Complete the following 4 methods(Mandatory) and one bonus(optional)task for part-2

#Task 01: Merge Lineup
def mergeLineup(pokemon_1, pokemon_2):
  result = np.array([0]*len(pokemon_1))

  n = len(pokemon_1)

  for i in range(n):
    if pokemon_1[i] == None:
      pokemon_1[i] = 0
    if pokemon_2[i] == None:
      pokemon_2[i] = 0

  result = np.array(result)
  for i in range(n):
    result[i] = pokemon_1[i] + pokemon_2[n - i - 1]

  return result



print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))
pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards

def discardCards(cards, t):

  new_arr=np.array([0]*len(cards))
  count=0
  for i in range(len(cards)-1):
    if cards[i]==t:
      if count%2==0:
        cards[i]=0
        count+=1
      else:
        count+=1
  for j in range(len(new_arr)-1):
    new_arr[j]=cards[j]
  for k in range(len(new_arr)-1):
    if new_arr[k]==0:
      for l in range(k,len(new_arr)-1):
        temp=new_arr[l]
        new_arr[l]=new_arr[l+1]
        new_arr[l+1]=temp
  return new_arr





print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

# Task 03: DUBER Fare Splitting
def findGroups(money, fare):
  # TO DO
  # Print outputs inside the method


  count=1
  flag=False

  for i in range(len(money)):
    if money[i]==0:
      continue
    else:


        for j in range(i+1,len(money)):
          if money[j]==0:
            continue
          else:
            if money[i]+money[j]==fare:

              print(f'Group {count} : {money[i]}, {money[j]}')
              count+=1
              money[j]=0
              money[i]=0
              break
  ungrouped2=''

  for i in range(len(money)):
    if money[i]==fare:

      print(f'Group {count} : {money[i]}')

      count+=1
    else:
      if money[i]!=0:
        ungrouped2+=f'{money[i]} '
  if len(ungrouped2)>0:
    print(f'Ungrouped: {ungrouped2}')





print("///  Task 03: DUBER Fare Splitting  ///")
money = np.array( [120, 100, 150, 50, 30])
fare = 150
print(f'Task 3:')
findGroups(money, fare) # This should print

# Group 1 : 120, 30
# Group 2 : 100, 50
# Group 3 : 150


money = np.array( [60, 150, 60, 30, 120, 30])
fare = 180
print(f'Task 3:')
findGroups(money, fare) # This should print

# Group 1 : 60, 120
# Group 2 : 30, 150
# Ungrouped : 30 60

def analyzeHobbies(* participants): #(* arguments) is used for variable number of parameters
  #TO DO
  #Print inside the function


    count=0
    for i in participants:
        for j in i :
            count+=1
    arr1=np.zeros(count,dtype=object)
    idx=0
    for i in participants:
      for j in i:
        arr1[idx]=j
        idx += 1

    string=" "
    count1=0
    for i in range(count):
      if arr1[i] not in string:
        string+=arr1[i] + ","
        count1+=1

    arr2 = np.zeros(count1,dtype=object)
    idx=0
    for i in range(count):
      if arr1[i] not in arr2:
        arr2[idx]=arr1[i]
        idx+=1
    print("Unique Activities in the Town:\n",arr2[:-1])

    for i in range(len(arr2)):
      count2=0
      for j in range(len(arr1)):
        if arr2[i]==arr1[j]:
          count2+=1

      print(f"{count2} participant(s) like(s) {arr1[i]}.")











print("///  Task 04: Get Those Hobbies  ///")
participant_1 = np.array( ["Hiking", "Reading", "Photography", "Cooking"])
participant_2 = np.array( ["Reading", "Hiking", "Painting"])
participant_3 = np.array( ["Hiking", "Cooking", "Photography"])
print(f'Task 4:')
analyzeHobbies(participant_1, participant_2, participant_3) #This should print

#Unique Activities in the Town:
#['Photography', 'Painting', 'Cooking', 'Reading', 'Hiking']

#Statistics:
#2 participant(s) like(s) Photography.
#1 participant(s) like(s) Painting.
#2 participant(s) like(s) Cooking.
#2 participant(s) like(s) Reading.
#3 participant(s) like(s) Hiking.



participant_1 = np.array( ["Gardening", "Traveling"])
participant_2 = np.array( ["Singing", "Gardening", "Painting"])
print(f'Task 4:')
analyzeHobbies(participant_1, participant_2) #This should print

#Unique Activities in the Town:
#[Gardening, Traveling, Singing, Painting]

#Statistics:
#2 participant(s) like(s) Gardening.
#1 participant(s) like(s) Traveling.
#1 participant(s) like(s) Singing.
#1 participant(s) like(s) Painting.

"""PART 1

For Assignment Part-1, you can create new code cells in the below and write your codes there. Also you should write driver codes to test your code for part-1.
"""

#Task1
def mean(arr):
  summation = 0
  for i in arr:
    summation += i
  return summation/len(arr)

arr = np.array([10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4] )
result=mean(arr)
print(result)

#Task2
def standard_dev(arr):
  avg = mean(arr)
  summation = 0
  for i in arr:
    summation += (i-avg)**2
  stand_dev = (summation/len(arr))**0.5
  return stand_dev


arr = np.array([10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4] )
result=standard_dev(arr)
print(result)

#Task3
def find_dev(arr):
  avg = mean(arr)
  stand_dev = standard_dev(arr)
  count = 0
  for i in arr:
    if i >= avg+(stand_dev*1.5) or i <= avg-(stand_dev*1.5):
      count += 1
  new = np.zeros(count)
  count2 = 0
  for i in arr:
    if i>= avg+(stand_dev*1.5) or i<= avg-(stand_dev*1.5):
      new[count2] = i
      count2 += 1
  return new

arr = np.array([10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4] )
result=find_dev(arr)
print(result)

#Task4
arr = np.array([10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4])
print(mean(arr))
print(standard_dev(arr))
print(find_dev(arr))